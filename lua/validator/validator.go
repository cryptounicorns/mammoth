package validator

import (
	validator "github.com/asaskevich/govalidator"
	luamapper "github.com/corpix/lua/mapper"
	lua "github.com/yuin/gopher-lua"
)

var (
	fns = map[string]lua.LGFunction{
		"Abs":                        luamapper.MustToGFunction(validator.Abs),
		"BlackList":                  luamapper.MustToGFunction(validator.BlackList),
		"ByteLength":                 luamapper.MustToGFunction(validator.ByteLength),
		"CamelCaseToUnderscore":      luamapper.MustToGFunction(validator.CamelCaseToUnderscore),
		"Contains":                   luamapper.MustToGFunction(validator.Contains),
		"Count":                      luamapper.MustToGFunction(validator.Count),
		"Each":                       luamapper.MustToGFunction(validator.Each),
		"ErrorByField":               luamapper.MustToGFunction(validator.ErrorByField),
		"ErrorsByField":              luamapper.MustToGFunction(validator.ErrorsByField),
		"Filter":                     luamapper.MustToGFunction(validator.Filter),
		"Find":                       luamapper.MustToGFunction(validator.Find),
		"GetLine":                    luamapper.MustToGFunction(validator.GetLine),
		"GetLines":                   luamapper.MustToGFunction(validator.GetLines),
		"HasLowerCase":               luamapper.MustToGFunction(validator.HasLowerCase),
		"HasUpperCase":               luamapper.MustToGFunction(validator.HasUpperCase),
		"InRange":                    luamapper.MustToGFunction(validator.InRange),
		"InRangeFloat32":             luamapper.MustToGFunction(validator.InRangeFloat32),
		"InRangeFloat64":             luamapper.MustToGFunction(validator.InRangeFloat64),
		"InRangeInt":                 luamapper.MustToGFunction(validator.InRangeInt),
		"IsASCII":                    luamapper.MustToGFunction(validator.IsASCII),
		"IsAlpha":                    luamapper.MustToGFunction(validator.IsAlpha),
		"IsAlphanumeric":             luamapper.MustToGFunction(validator.IsAlphanumeric),
		"IsBase64":                   luamapper.MustToGFunction(validator.IsBase64),
		"IsByteLength":               luamapper.MustToGFunction(validator.IsByteLength),
		"IsCIDR":                     luamapper.MustToGFunction(validator.IsCIDR),
		"IsCreditCard":               luamapper.MustToGFunction(validator.IsCreditCard),
		"IsDNSName":                  luamapper.MustToGFunction(validator.IsDNSName),
		"IsDataURI":                  luamapper.MustToGFunction(validator.IsDataURI),
		"IsDialString":               luamapper.MustToGFunction(validator.IsDialString),
		"IsDivisibleBy":              luamapper.MustToGFunction(validator.IsDivisibleBy),
		"IsEmail":                    luamapper.MustToGFunction(validator.IsEmail),
		"IsFilePath":                 luamapper.MustToGFunction(validator.IsFilePath),
		"IsFloat":                    luamapper.MustToGFunction(validator.IsFloat),
		"IsFullWidth":                luamapper.MustToGFunction(validator.IsFullWidth),
		"IsHalfWidth":                luamapper.MustToGFunction(validator.IsHalfWidth),
		"IsHash":                     luamapper.MustToGFunction(validator.IsHash),
		"IsHexadecimal":              luamapper.MustToGFunction(validator.IsHexadecimal),
		"IsHexcolor":                 luamapper.MustToGFunction(validator.IsHexcolor),
		"IsHost":                     luamapper.MustToGFunction(validator.IsHost),
		"IsIP":                       luamapper.MustToGFunction(validator.IsIP),
		"IsIPv4":                     luamapper.MustToGFunction(validator.IsIPv4),
		"IsIPv6":                     luamapper.MustToGFunction(validator.IsIPv6),
		"IsISBN":                     luamapper.MustToGFunction(validator.IsISBN),
		"IsISBN10":                   luamapper.MustToGFunction(validator.IsISBN10),
		"IsISBN13":                   luamapper.MustToGFunction(validator.IsISBN13),
		"IsISO3166Alpha2":            luamapper.MustToGFunction(validator.IsISO3166Alpha2),
		"IsISO3166Alpha3":            luamapper.MustToGFunction(validator.IsISO3166Alpha3),
		"IsISO4217":                  luamapper.MustToGFunction(validator.IsISO4217),
		"IsISO693Alpha2":             luamapper.MustToGFunction(validator.IsISO693Alpha2),
		"IsISO693Alpha3b":            luamapper.MustToGFunction(validator.IsISO693Alpha3b),
		"IsIn":                       luamapper.MustToGFunction(validator.IsIn),
		"IsInt":                      luamapper.MustToGFunction(validator.IsInt),
		"IsJSON":                     luamapper.MustToGFunction(validator.IsJSON),
		"IsLatitude":                 luamapper.MustToGFunction(validator.IsLatitude),
		"IsLongitude":                luamapper.MustToGFunction(validator.IsLongitude),
		"IsLowerCase":                luamapper.MustToGFunction(validator.IsLowerCase),
		"IsMAC":                      luamapper.MustToGFunction(validator.IsMAC),
		"IsMongoID":                  luamapper.MustToGFunction(validator.IsMongoID),
		"IsMultibyte":                luamapper.MustToGFunction(validator.IsMultibyte),
		"IsNatural":                  luamapper.MustToGFunction(validator.IsNatural),
		"IsNegative":                 luamapper.MustToGFunction(validator.IsNegative),
		"IsNonNegative":              luamapper.MustToGFunction(validator.IsNonNegative),
		"IsNonPositive":              luamapper.MustToGFunction(validator.IsNonPositive),
		"IsNull":                     luamapper.MustToGFunction(validator.IsNull),
		"IsNumeric":                  luamapper.MustToGFunction(validator.IsNumeric),
		"IsPort":                     luamapper.MustToGFunction(validator.IsPort),
		"IsPositive":                 luamapper.MustToGFunction(validator.IsPositive),
		"IsPrintableASCII":           luamapper.MustToGFunction(validator.IsPrintableASCII),
		"IsRFC3339":                  luamapper.MustToGFunction(validator.IsRFC3339),
		"IsRFC3339WithoutZone":       luamapper.MustToGFunction(validator.IsRFC3339WithoutZone),
		"IsRGBcolor":                 luamapper.MustToGFunction(validator.IsRGBcolor),
		"IsRequestURI":               luamapper.MustToGFunction(validator.IsRequestURI),
		"IsRequestURL":               luamapper.MustToGFunction(validator.IsRequestURL),
		"IsRsaPub":                   luamapper.MustToGFunction(validator.IsRsaPub),
		"IsRsaPublicKey":             luamapper.MustToGFunction(validator.IsRsaPublicKey),
		"IsSSN":                      luamapper.MustToGFunction(validator.IsSSN),
		"IsSemver":                   luamapper.MustToGFunction(validator.IsSemver),
		"IsTime":                     luamapper.MustToGFunction(validator.IsTime),
		"IsURL":                      luamapper.MustToGFunction(validator.IsURL),
		"IsUTFDigit":                 luamapper.MustToGFunction(validator.IsUTFDigit),
		"IsUTFLetter":                luamapper.MustToGFunction(validator.IsUTFLetter),
		"IsUTFLetterNumeric":         luamapper.MustToGFunction(validator.IsUTFLetterNumeric),
		"IsUTFNumeric":               luamapper.MustToGFunction(validator.IsUTFNumeric),
		"IsUUID":                     luamapper.MustToGFunction(validator.IsUUID),
		"IsUUIDv3":                   luamapper.MustToGFunction(validator.IsUUIDv3),
		"IsUUIDv4":                   luamapper.MustToGFunction(validator.IsUUIDv4),
		"IsUUIDv5":                   luamapper.MustToGFunction(validator.IsUUIDv5),
		"IsUpperCase":                luamapper.MustToGFunction(validator.IsUpperCase),
		"IsVariableWidth":            luamapper.MustToGFunction(validator.IsVariableWidth),
		"IsWhole":                    luamapper.MustToGFunction(validator.IsWhole),
		"LeftTrim":                   luamapper.MustToGFunction(validator.LeftTrim),
		"Map":                        luamapper.MustToGFunction(validator.Map),
		"Matches":                    luamapper.MustToGFunction(validator.Matches),
		"NormalizeEmail":             luamapper.MustToGFunction(validator.NormalizeEmail),
		"PadBoth":                    luamapper.MustToGFunction(validator.PadBoth),
		"PadLeft":                    luamapper.MustToGFunction(validator.PadLeft),
		"PadRight":                   luamapper.MustToGFunction(validator.PadRight),
		"Range":                      luamapper.MustToGFunction(validator.Range),
		"RemoveTags":                 luamapper.MustToGFunction(validator.RemoveTags),
		"ReplacePattern":             luamapper.MustToGFunction(validator.ReplacePattern),
		"Reverse":                    luamapper.MustToGFunction(validator.Reverse),
		"RightTrim":                  luamapper.MustToGFunction(validator.RightTrim),
		"RuneLength":                 luamapper.MustToGFunction(validator.RuneLength),
		"SafeFileName":               luamapper.MustToGFunction(validator.SafeFileName),
		"SetFieldsRequiredByDefault": luamapper.MustToGFunction(validator.SetFieldsRequiredByDefault),
		"Sign":                  luamapper.MustToGFunction(validator.Sign),
		"StringLength":          luamapper.MustToGFunction(validator.StringLength),
		"StringMatches":         luamapper.MustToGFunction(validator.StringMatches),
		"StripLow":              luamapper.MustToGFunction(validator.StripLow),
		"ToBoolean":             luamapper.MustToGFunction(validator.ToBoolean),
		"ToFloat":               luamapper.MustToGFunction(validator.ToFloat),
		"ToInt":                 luamapper.MustToGFunction(validator.ToInt),
		"ToJSON":                luamapper.MustToGFunction(validator.ToJSON),
		"ToString":              luamapper.MustToGFunction(validator.ToString),
		"Trim":                  luamapper.MustToGFunction(validator.Trim),
		"Truncate":              luamapper.MustToGFunction(validator.Truncate),
		"UnderscoreToCamelCase": luamapper.MustToGFunction(validator.UnderscoreToCamelCase),
		"ValidateStruct":        luamapper.MustToGFunction(validator.ValidateStruct),
		"WhiteList":             luamapper.MustToGFunction(validator.WhiteList),
	}

	vars = map[string]lua.LValue{}
)

func Loader(l *lua.LState) int {
	mod := l.SetFuncs(l.NewTable(), fns)

	for k, v := range vars {
		l.SetField(mod, k, v)
	}

	l.Push(mod)

	return 1
}
